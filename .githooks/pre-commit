#!/bin/sh

# shellcheck source=bin/lib/output.sh
. "$(dirname "$0")/../bin/lib/output.sh"

stagedFiles=$(git diff --cached --name-only)
modifiedFiles=$(git ls-files -m)

# Check if commit amend.
result=$(ps -ocommand= -p $PPID | grep -c ' --amend')
# Check if empty commit.
if [ -z "$stagedFiles" ] && [ "$result" -eq 0 ]; then
  output 'No changes added to commit (use "git add" and/or "git commit -a").' "error"
  exit 1
fi

for filename in $stagedFiles
do
  # Skip binary file.
  result=$(file -bL --mime "$filename" | grep -c '^text')
  if [ "$result" -eq 0 ]; then
    continue
  fi

  # Check if staged file was modified before commit.
  stagedFileIsModified=false
  for modified in $modifiedFiles
  do
    if [ "$modified" = "$filename" ]; then
      stagedFileIsModified=true
      break
    fi
  done

  # Check if a PHP file.
  if [ "${filename##*.}" = "php" ] && [ -f "$filename" ]; then
    # Check if file need to be fixed.
    result=$($(dirname "$0")/../bin/php-cs-fixer "$filename" --dry-run --diff 2>&1 | grep -c "begin diff")
    if [ "$result" -gt 0 ]; then
      if [ $stagedFileIsModified = true ]; then
        problematicFiles=$problematicFiles$filename"\n"
        continue
      else
        "$(dirname "$0")/../bin/php-cs-fixer" "$filename"
        git add "$filename"
        fixedFiles=$fixedFiles$filename"\n"
      fi
    fi
  fi
  
  # Check if there is a line with only whitespace characters at the end of a file.
  check=true
  while [ $check = true ]
  do
    check=false
    lastLine=$(tail -n 1 "$stagedFiles")
    result=$(echo "$lastLine" | grep -c "^\s*$")
    if [ "$result" -gt 0 ]; then
      if [ $stagedFileIsModified = true ]; then
        problematicFiles=$problematicFiles$filename"\n"
        continue
      else
        numberOfLines=`expr $(cat "$stagedFiles" | wc -l) - 1`
        result=$(head -n "$numberOfLines" "$stagedFiles")
        printf "$result" >| "$stagedFiles"
        lastLine=$(tail -n 1 "$stagedFiles")
        check=true
      fi
    fi
  done

  # Check if there is a newline at the end of a file.
  if [ "$lastLine" != "" ]; then
    if [ $stagedFileIsModified = true ]; then
      problematicFiles="$problematicFiles$filename\n"
      continue
    else
      # Add a newline when missing.
      printf "\n" >> "$stagedFiles"
      git add "$filename"
      fixedFiles="$fixedFiles$filename\n"
    fi
  fi
done

if [ -n "$fixedFiles" ]
then
  output "File(s) fixed and added to the commit:" "heading"
  output "$fixedFiles" "info"
fi

if [ -n "$problematicFiles" ]
then
  output "File(s) cannot be fixed because it has been modified after being staged." "heading"
  output '(use "bin/git add <file>" and/or "bin/git restore <file>"):' "heading"
  output "$problematicFiles" "info"
  exit 1
fi
